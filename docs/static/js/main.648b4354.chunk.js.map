{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","value","setValue","onSubmit","e","preventDefault","trim","length","data","type","onChange","target","getGifs","category","a","url","axios","get","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGridItem","className","src","alt","GifGrid","GifExpertApp","categories","setCategories","cat","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MA8BeA,EA3BK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EAEbC,mBAAS,IAFI,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAYvC,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAMK,OAAOC,OAAS,IACxBR,GAAY,SAACS,GAAD,OAAWP,GAAX,mBAAqBO,OACjCN,EAAS,MAKX,SACE,uBACEO,KAAK,OACLR,MAAOA,EACPS,SAAU,SAACN,GAAD,OAAOF,EAASE,EAAEO,OAAOV,a,iDClB9BW,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACfC,EADe,iDACiCF,EADjC,+DAEEG,IAAMC,IAAIF,GAFZ,uBAEbP,EAFa,EAEbA,KAEFU,EAAOV,EAAKA,KAAKW,KAAI,SAAAC,GAAQ,IAAD,EAChC,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXP,IAAG,UAAEK,EAAIG,cAAN,aAAE,EAAYC,iBAAiBT,QARjB,kBAYdG,GAZc,2CAAH,sDCmBLO,EAlBM,SAACZ,GAAc,IAAD,EACPb,mBAAS,CACjCQ,KAAM,GACNkB,SAAS,IAHsB,mBAC1BC,EAD0B,KACnBC,EADmB,KAejC,OATAC,qBAAU,WACRjB,EAAQC,GAAUiB,MAAK,SAACC,GACtBH,EAAS,CACPpB,KAAMuB,EACNL,SAAS,SAGZ,CAACb,IAEGc,GCPMK,EATK,SAAC,GAAuB,EAArBX,GAAsB,IAAlBN,EAAiB,EAAjBA,IAAKO,EAAY,EAAZA,MAC9B,OACE,sBAAKW,UAAU,yCAAf,UACE,qBAAKA,UAAU,cAAcC,IAAKnB,EAAKoB,IAAI,UAC3C,mBAAGF,UAAU,cAAb,SAA4BX,QCmBnBc,EArBC,SAAC,GAAkB,IAAhBvB,EAAe,EAAfA,SAAe,EAEEY,EAAaZ,GAAvCa,EAFwB,EAExBA,QAAeH,EAFS,EAEff,KAEjB,OACE,qCACE,oBAAIyB,UAAU,oCAAd,SAAmDpB,IAClDa,GAAW,mBAAGO,UAAU,mCAAb,yBACZ,qBAAKA,UAAU,YAAf,SAEGV,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAEMA,GADCA,EAAIC,aCWNgB,EAvBM,WAAO,IAAD,EAEWrC,mBAAS,CAAC,oBAFrB,mBAElBsC,EAFkB,KAENC,EAFM,KAIzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaxC,YAAawC,IAC1B,uBAEA,6BAEID,EAAWnB,KAAI,SAACqB,GAAD,OACb,cAAC,EAAD,CAEE3B,SAAU2B,GADLA,Y,YCZnBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.648b4354.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategory }) => {\n\n  const [value, setValue] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (value.trim().length > 2) {\n      setCategory((data) => [value, ...data]);\n      setValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n      />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategory: PropTypes.func.isRequired,\n}\n\nexport default AddCategory;\n","import axios from \"axios\";\n\nexport const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=UtqUalwdqH3gM8m4vxdqmITmuiw9PH76`;\n  const { data } = await axios.get(url);\n\n  const gifs = data.data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    }\n  });\n\n  return gifs;\n}","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nconst useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setState({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state;\n}\n\nexport default useFetchGifs","import React from 'react';\n\nconst GifGridItem = ({ id, url, title }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img className=\"card__image\" src={url} alt=\"title\" />\n      <p className=\"card__title\">{title}</p>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","import React from 'react';\nimport useFetchGifs from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n\n  const { loading, data: images } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n      {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\n      <div className=\"card-grid\">\n\n        {images.map((img) => (\n          <GifGridItem\n            key={img.id}\n            {...img}\n          />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default GifGrid;\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['Attack on Titan']);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategory={setCategories} />\n      <hr />\n\n      <ol>\n        {\n          categories.map((cat) => (\n            <GifGrid\n              key={cat}\n              category={cat} />\n          ))\n        }\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport 'animate.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}